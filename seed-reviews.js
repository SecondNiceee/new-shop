// src/scripts/seed-reviews-axios.js
import axios from "axios";

// ========================
// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
// ========================
const API_URL = 'http://localhost:3000/api'; // ‚Üê –ø–æ–º–µ–Ω—è–π –Ω–∞ —Å–≤–æ–π URL
const ADMIN_EMAIL = 'col1596321@gmail.com';
const ADMIN_PASSWORD = '11559966332211kkKK'; // –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
const MAX_REVIEWS_PER_USER = 5;
const MIN_REVIEWS_PER_USER = 2;

// ========================
// –î–∞–Ω–Ω—ã–µ
// ========================
const COMMENTS = [
  '–¢–æ–≤–∞—Ä –∫—Ä—É—Ç—å!',
  '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é.',
  '–í—Å—ë –ø—Ä–∏—à–ª–æ –≤–æ–≤—Ä–µ–º—è, —É–ø–∞–∫–æ–≤–∫–∞ —Ü–µ–ª–∞—è.',
  '–ù–æ—Ä–º, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ.',
  '–ù–µ —Å–∞–º—ã–π –ª—É—á—à–∏–π —Ç–æ–≤–∞—Ä, –Ω–æ –∑–∞ —ç—Ç–∏ –¥–µ–Ω—å–≥–∏ ‚Äî —Å–æ–π–¥—ë—Ç.',
  '–û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω –ø–æ–∫—É–ø–∫–æ–π!',
  '–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –ø—Ä–æ–¥–∞—Ü—É —Ä–µ—Å–ø–µ–∫—Ç.',
  '–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞, —Ç–æ–≤–∞—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—é.',
  '–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –ù–µ –±—É–¥—É –±—Ä–∞—Ç—å –µ—â—ë.',
  '–°—É–ø–µ—Ä! –ö—É–ø–ª—é –µ—â—ë —Ä–∞–∑.',
  '–°—Ä–µ–¥–Ω–µ. –ù–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ.',
  '–õ—É—á—à–µ, —á–µ–º –æ–∂–∏–¥–∞–ª!',
  '–ü–æ—á—Ç–∏ –æ—Ç–ª–∏—á–Ω–æ, –Ω–æ –µ—Å—Ç—å –º–∏–Ω—É—Å—ã.',
  '–¢–≤—ë—Ä–¥–∞—è –ø—è—Ç—ë—Ä–∫–∞!',
  '–û–¥–∏–Ω —Ä–∞–∑ –∫—É–ø–∏–ª ‚Äî —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —Å—é–¥–∞.',
];

// –†–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ –º–∞—Å—Å–∏–≤–∞
const random = (arr) => arr[Math.floor(Math.random() * arr.length)];

// –†–∞–Ω–¥–æ–º–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç 1 –¥–æ 5
const randomRating = () => Math.floor(Math.random() * 5) + 1;

// ========================
// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
// ========================

// ========================
// –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
// ========================

// ========================
// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
// ========================
async function getAll(collection) {
  let skip = 0;
  const limit = 100;

  const { data } = await axios.get(`${API_URL}/${collection}`, {
    params: { limit, skip, depth: 0 },
  });

  console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ ${collection}: ${data.docs}`);
  return data.docs;
}

// ========================
// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤
// ========================
async function hasReview(productID, userID) {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—å:', { productID, userID })

    const { data } = await axios.get(`${API_URL}/reviews`, {
      params: {
        // üî• –í–æ—Ç —Ç–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        where: {
          and: [
            { product: { equals: productID } },
            { 'user.id': { equals: userID } },
          ],
        },
        limit: 1,
      }
    })
    console.log(productID, userID);

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:', data.docs.length)
    return data.docs.length > 0
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ hasReview:', error.response?.data || error.message)
    return false
  }
}
// ========================
// –°–æ–∑–¥–∞—Ç—å –æ—Ç–∑—ã–≤
// ========================
async function createReview(productID, userID, rating, comment) {
  try {
    // üîß –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Å—Ç—Ä–æ–∫–∏
    const safeProductID = String(productID)
    const safeUserID = String(userID)

    console.log('üì§ –°–æ–∑–¥–∞—ë–º –æ—Ç–∑—ã–≤:', { user: safeUserID, product: safeProductID })

    await axios.post(
      `${API_URL}/reviews`,
      {
        product: safeProductID, // ‚Üê —Å—Ç—Ä–æ–∫–∞
        user: safeUserID,      // ‚Üê —Å—Ç—Ä–æ–∫–∞
        rating,
        comment,
      },
      {
        headers: {
          'Content-Type': 'application/json'
        },
      }
    )

    console.log(`‚úÖ –û—Ç–∑—ã–≤ —Å–æ–∑–¥–∞–Ω: user=${safeUserID}, product=${safeProductID}, rating=${rating}`)
  } catch (error) {
    const message = error.response?.data?.errors?.[0]?.message || error.response?.data || error.message
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞:`, message)
    // üîç –î–æ–±–∞–≤–∏–º –¥–µ—Ç–∞–ª–∏
    if (error.response) {
      console.error('üîç Status:', error.response.status)
      console.error('üîç Data:', error.response.data)
    }
  }
}

// ========================
// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
// ========================
async function seedReviews() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ —á–µ—Ä–µ–∑ API...');

  // await login();

  const users = await getAll('users');
  const products = await getAll('products');

  console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
  console.log(`üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${products.length}`);

  if (users.length === 0 || products.length === 0) {
    console.warn('‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ ‚Äî –≤—ã—Ö–æ–¥–∏–º.');
    return;
  }

  let createdCount = 0;

  for (const user of users) {
    const numReviews = Math.floor(Math.random() * (MAX_REVIEWS_PER_USER - MIN_REVIEWS_PER_USER + 1)) + MIN_REVIEWS_PER_USER;
    const shuffled = [...products].sort(() => 0.5 - Math.random());
    const selected = shuffled.slice(0, numReviews);

    for (const product of selected) {
      const exists = await hasReview(product.id, user.id);
      if (exists) {
        console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${user.email} —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤ –Ω–∞ "${product.title}"`);
        continue;
      }

      const rating = randomRating();
      const comment = random(COMMENTS);

      await createReview(product.id, user.id, rating, comment);
      createdCount++;
    }
  }

  console.log(`\n‚ú® –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ ${createdCount} –æ—Ç–∑—ã–≤–æ–≤ —á–µ—Ä–µ–∑ API.`);
}

// ========================
// –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é

// ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è import
seedReviews();