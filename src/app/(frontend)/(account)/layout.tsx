// src/app/account/layout.tsx
import type React from "react"
import { cookies } from "next/headers"
import { redirect } from "next/navigation"
import { routerConfig } from "@/config/router.config"
import AccountLayoutClient from "./account-layout-client"
import type { Metadata } from "next"

// üîí –ó–∞–ø—Ä–µ—â–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
export const metadata: Metadata = {
  title: "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ‚Äî –ì—Ä–∞–Ω–¥–ë–ê–ó–ê–†",
  description: "–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ –ì—Ä–∞–Ω–¥–ë–ê–ó–ê–†",
  robots: {
    index: false, // ‚Üê –Ω–µ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å
    follow: false, // ‚Üê –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–∞–º
  },
  // –£–±–∏—Ä–∞–µ–º OG –∏ Twitter ‚Äî –Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  openGraph: undefined,
  twitter: undefined,
}

export default async function AccountLayout({
  children,
}: {
  children: React.ReactNode
}) {
  const cookieStore = await cookies()
  const payloadToken = cookieStore.get("payload-token")

  try {
    const response = await fetch(`${process.env.PAYLOAD_PUBLIC_SERVER_URL}/api/users/me`, {
      method: "GET",
      headers: {
        Cookie: payloadToken ? `payload-token=${payloadToken.value}` : "",
      },
      // ‚ö†Ô∏è –í–∞–∂–Ω–æ: –Ω–µ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å
      cache: "no-store",
    })

    if (!response.ok) {
      console.log("[v0] Auth check failed: response not ok", response.status)
      redirect(routerConfig.home)
    }

    const data = await response.json()

    if (!data.user) {
      console.log("[v0] Auth check failed: no user in response")
      redirect(routerConfig.home)
    }
  } catch (e) {
    console.log("[v0] Auth check error:", e)
    redirect(routerConfig.home)
  }

  return <AccountLayoutClient>{children}</AccountLayoutClient>
}
