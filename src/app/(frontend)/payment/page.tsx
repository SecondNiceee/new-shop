// app/payment/page.tsx
import { RichText } from '@payloadcms/richtext-lexical/react';
import { notFound } from "next/navigation";
import jsxConverters from '@/utils/jsx-converters';
import { RefreshRouteOnSave } from '@/utils/RefreshRouteOnSave';
import "@/styles/richText.scss";
import { getPayment } from '@/actions/server/pages/getPayment';

// ‚úÖ –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: 1 –¥–µ–Ω—å (86400 —Å–µ–∫)
export const revalidate = 86400;

function PaymentSchema({ title, description }: { title: string; description: string }) {
  return (
    <script
      type="application/ld+json"
      dangerouslySetInnerHTML={{
        __html: JSON.stringify({
          "@context": "https://schema.org",
          "@type": "WebPage",
          "name": title,
          "description": description,
          "url": `${process.env.NEXT_PUBLIC_URL}/payment`,
          "publisher": {
            "@type": "Organization",
            "name": "–ì—Ä–∞–Ω–¥–ë–ê–ó–ê–†",
            "url": process.env.NEXT_PUBLIC_URL
          },
          "about": "–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ"
        })
      }}
    />
  );
}

export default async function PaymentPage() {
  try {
    const payment = await getPayment();
    if (!payment) {
      notFound();
    }
    const title = payment.title || "–û–ø–ª–∞—Ç–∞ | –ì—Ä–∞–Ω–¥–ë–ê–ó–ê–†";
    const description = 
      payment.description || 
      "–£—Å–ª–æ–≤–∏—è –∏ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ –ì—Ä–∞–Ω–¥–ë–ê–ó–ê–†: –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã, –°–ë–ü, –Ω–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.";
    return (
      <>
        <PaymentSchema title={title} description={description} />
        <div className="rich-container">
          <RefreshRouteOnSave route="/payment" />
          <RichText converters={jsxConverters} data={payment.content} />
        </div>
      </>
    );
  } catch (error) {
    console.error("Error loading payment page:", error);
    notFound();
  }
}

// ‚úÖ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è SEO –∏ —Å–æ—Ü—Å–µ—Ç–µ–π
export async function generateMetadata() {
  try {
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ getDelivery() ‚Üí —Å—Ç–∞–ª–æ getPayment()
    const paymentData = await getPayment();

    const title = paymentData?.title 
      ? `${paymentData.title} | –ì—Ä–∞–Ω–¥–ë–ê–ó–ê–†` 
      : "–û–ø–ª–∞—Ç–∞ | –ì—Ä–∞–Ω–¥–ë–ê–ó–ê–†";

    const description = 
      paymentData?.description || 
      "–£—Å–ª–æ–≤–∏—è –∏ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ –ì—Ä–∞–Ω–¥–ë–ê–ó–ê–†: –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã, –°–ë–ü, –Ω–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.";


    return {
      title,
      description,
      keywords: [
        "–æ–ø–ª–∞—Ç–∞",
        "—Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã",
        "–æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑",
        "–æ–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞",
        "–æ–ø–ª–∞—Ç–∞ –ø–æ –°–ë–ü",
        "–æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π",
        "–Ω–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏",
        "–ì—Ä–∞–Ω–¥–ë–ê–ó–ê–† –æ–ø–ª–∞—Ç–∞",
        "–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞"
      ],
      alternates: {
        canonical: `${process.env.NEXT_PUBLIC_URL}/payment`,
      },
      openGraph: {
        title,
        description,
        url: `${process.env.NEXT_PUBLIC_URL}/payment`,
        type: "website",
      }
    };
  } catch (error) {
    return {
      title: "–û–ø–ª–∞—Ç–∞ | –ì—Ä–∞–Ω–¥–ë–ê–ó–ê–†",
      description: "–£—Å–ª–æ–≤–∏—è –∏ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ –ì—Ä–∞–Ω–¥–ë–ê–ó–ê–†.",
      alternates: {
        canonical: `${process.env.NEXT_PUBLIC_URL}/payment`,
      },
    };
  }
}