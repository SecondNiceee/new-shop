// src/actions/getProductById.ts
'use server';

import { getPayload } from 'payload';
import config from '../../../payload.config';
import { Product } from '@/payload-types';

type Result =
  | { product: Product; error: null }
  | { product: null; error: { message: string } };


export const getProductById = async (id: number | string): Promise<Result> => {
  try {
    // –ü—Ä–∏–≤–æ–¥–∏–º id –∫ —Å—Ç—Ä–æ–∫–µ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    const idStr = String(id);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å Payload
    const payload = await getPayload({ config });

    // –ò—â–µ–º —Ç–æ–≤–∞—Ä
    const result = await payload.findByID({
      collection: 'products',
      id: idStr,
      depth: 2,
       // –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç.–¥.
    });

    // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
    if (!result) {
      return {
        product: null,
        error: { message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
      };
    }

    return {
      product: result,
      error: null,
    };
  } catch (error: unknown) {
    // üîπ –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    console.error(`[getProductById] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ —Å ID ${id}:`, error);

    // üîπ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return {
      product: null,
      error: { message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä' },
    };
  }
};