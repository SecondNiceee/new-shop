import { isAdmin, isLoggedIn, isOwn } from '@/utils/accessUtils';
import { type CollectionConfig } from 'payload'

const Reviews: CollectionConfig = {
  slug: 'reviews',
  admin: {
    useAsTitle: 'product',
    defaultColumns: ['product', 'user', 'rating', 'createdAt'],
    group: 'Content',
  },
  access: {
    read: () => true,
    create: isLoggedIn,
    update: isOwn,
    delete: isAdmin,
  },
  fields: [
    {
      name: 'product',
      type: 'relationship',
      relationTo: 'products',
      required: true,
      admin: {
        position: 'sidebar',
      },
    },
    {
      name: 'user',
      type: 'relationship',
      relationTo: 'users',
      required: true,
      defaultValue: ({ user }) => user?.id, // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      access: {
        create: () => false, // –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        read: () => true,
      },
      admin: {
        position: 'sidebar',
      },
    },
    {
      name: 'rating',
      type: 'number',
      label: '–û—Ü–µ–Ω–∫–∞',
      required: true,
      min: 1,
      max: 5,
      defaultValue: 5,
      admin: {
        step: 1,
        position: 'sidebar',
      },
    },
    {
      name: 'comment',
      type: 'textarea',
      label: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
      required: false,
      minLength: 10,
      maxLength: 1000,
      admin: {
        rows: 4,
      },
    },
  ],
  hooks: {
    beforeValidate : [
      async ({req, data}) => {
        if (!data){
          return data;
        }
        if (!data.user){
          const user = req.user;
          data.user = user?.id;
        }
        return data;
      }
    ],
    // ‚úÖ –ó–∞–ø—Ä–µ—â–∞–µ–º –æ—Å—Ç–∞–≤–ª—è—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
    beforeChange: [
      async ({ operation, data, req }) => {
        if (operation === 'create') {
          const existing = await req.payload.find({
            collection: 'reviews',
            where: {
              and: [{ product: { equals: data.product} }, { user: { equals: req.user?.id } }],
            },
            limit: 1,
            overrideAccess: true, // –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ access —Å–∫—Ä—ã–≤–∞–µ—Ç
          })

          if (existing.docs.length > 0) {
            throw new Error('U already make review')
          }
        }
        return data
      },
    ],
    beforeRead: [
      async ({ doc, req }) => {
        // üîê –ó–∞—â–∏—Ç–∞: –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!doc.user || !req.payload) return doc

        try {
          const payload = req.payload

          // ‚úÖ –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –¢–û–õ–¨–ö–û –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const userResult = await payload.findByID({
            collection: 'users',
            id: typeof doc.user === 'object' ? doc.user.id : doc.user,
            overrideAccess: true, // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º access.read
          })

          if (userResult) {
            // üîÅ –ó–∞–º–µ–Ω—è–µ–º `user` –Ω–∞ –æ–±—ä–µ–∫—Ç —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            doc.user = {
              id: userResult.id,
              email: userResult.email,
            }
          }
        } catch (error) {
          console.error('‚ùå Error cant find user', error)
          // –û—Å—Ç–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã ID
        }

        return doc
      },
    ],

    // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞
    afterChange: [
      async ({ operation, doc, req }) => {
        if (!['create', 'update'].includes(operation)) return doc

        let productId = doc.product
        if (typeof productId === 'object' && productId !== null) {
          productId = productId.id || productId.value
        }

        if (!productId) {
          console.warn('‚ö†Ô∏è No productId')
          return doc
        }

        try {
          const payload = req.payload

          // üîç –ù–∞—Ö–æ–¥–∏–º –í–°–ï –æ—Ç–∑—ã–≤—ã, –ö–†–û–ú–ï —Ç–µ–∫—É—â–µ–≥–æ
          const existingReviews = await payload.find({
            collection: 'reviews',
            where: {
              and: [
                { product: { equals: productId } },
                { id: { not_equals: doc.id } }, // –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π, –µ—Å–ª–∏ update
              ],
            },
            limit: 0,
            overrideAccess: true,
          })

          // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç–∑—ã–≤ –≤—Ä—É—á–Ω—É—é
          const allReviews = [...existingReviews.docs]

          // –ü—Ä–∏ create ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
          // –ü—Ä–∏ update ‚Äî –∑–∞–º–µ–Ω—è–µ–º (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å)
          const existingIndex = allReviews.findIndex((r) => r.id === doc.id)
          if (existingIndex > -1) {
            allReviews[existingIndex] = doc
          } else {
            allReviews.push(doc) // ‚úÖ –í–æ—Ç –æ–Ω ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –æ—Ç–∑—ã–≤!
          }

          const count = allReviews.length
          const avg =
            count > 0
              ? Math.round((allReviews.reduce((sum, r) => sum + r.rating, 0) / count) * 10) / 10
              : 0

          console.log(`üìä –£—á—Ç–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: ${count}, —Å—Ä–µ–¥–Ω–∏–π: ${avg}`)

          // üîÅ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
          setTimeout(async () => {
            await payload.update({
              collection: 'products',
              id: productId,
              data: {
                averageRating: avg,
                reviewsCount: count,
              },
              overrideAccess: true,
            })
            console.log(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç ${productId} –æ–±–Ω–æ–≤–ª—ë–Ω`)
          }, 50)
        } catch (error: any) {
          console.error('‚ùå –û—à–∏–±–∫–∞:', error.message)
        }

        return doc
      },
    ],

    // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞
    afterDelete: [
      async ({ doc, req }) => {
        let productId = doc.product
        if (typeof productId === 'object' && productId !== null) {
          productId = productId.id || productId.value
        }

        if (!productId) return

        try {
          const payload = req.payload

          // üîç –ü–æ–ª—É—á–∞–µ–º –í–°–ï –æ—Ç–∑—ã–≤—ã, –∫—Ä–æ–º–µ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ
          const reviews = await payload.find({
            collection: 'reviews',
            where: {
              and: [{ product: { equals: productId } }, { id: { not_equals: doc.id } }],
            },
            limit: 0,
            overrideAccess: true,
          })

          const count = reviews.docs.length
          const avg =
            count > 0
              ? Math.round((reviews.docs.reduce((sum, r) => sum + r.rating, 0) / count) * 10) / 10
              : 0

          // üîÅ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
          setTimeout(async () => {
            await payload.update({
              collection: 'products',
              id: productId,
              data: {
                averageRating: avg,
                reviewsCount: count,
              },
              overrideAccess: true,
            })
            console.log(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç ${productId} –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è`)
          }, 50)
        } catch (error: any) {
          console.error('‚ùå –û—à–∏–±–∫–∞:', error.message)
        }
      },
    ],
  },
}

export default Reviews
