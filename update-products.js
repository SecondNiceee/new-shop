// update-products.js
import axios from "axios";
import { LoremIpsum } from "lorem-ipsum"; // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è REST API Payload CMS
const BASE_URL = 'http://localhost:3000/api/products';

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä lorem ipsum
const lorem = new LoremIpsum({
  sentencesPerParagraph: { max: 3, min: 1 },
  wordsPerSentence: { max: 10, min: 5 },
});

// –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è storageConditions
const storageConditionsOptions = [
  '–•—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ 0-5¬∞C',
  '–°—É—Ö–æ–µ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–µ –º–µ—Å—Ç–æ',
  '–•—Ä–∞–Ω–∏—Ç—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ –ø—Ä–∏ 2-8¬∞C',
  '–ò–∑–±–µ–≥–∞—Ç—å –ø—Ä—è–º—ã—Ö —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ª—É—á–µ–π',
  '–•—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏ –∫–æ–º–Ω–∞—Ç–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ',
];

// –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è ingredients
const ingredientsOptions = [
  '–ú—É–∫–∞, —Å–∞—Ö–∞—Ä, —Å–æ–ª—å, –≤–æ–¥–∞',
  '–í–æ–¥–∞, –º–∞—Å–ª–æ, —Å–ø–µ—Ü–∏–∏, –¥—Ä–æ–∂–∂–∏',
  '–ú—è—Å–æ, —Å–æ–ª—å, –ø–µ—Ä–µ—Ü, –ª—É–∫',
  '–ú–æ–ª–æ–∫–æ, —Å–ª–∏–≤–∫–∏, —Å–∞—Ö–∞—Ä, –≤–∞–Ω–∏–ª—å',
  '–†—ã–±–∞, —Å–æ–ª—å, –ª–∏–º–æ–Ω–Ω–∞—è –∫–∏—Å–ª–æ—Ç–∞',
  '–û–≤–æ—â–∏, –º–∞—Å–ª–æ, —É–∫—Å—É—Å, —Å–ø–µ—Ü–∏–∏',
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞
function getRandomItems(array, maxItems) {
  const shuffled = [...array].sort(() => 0.5 - Math.random());
  const count = getRandomInt(0, maxItems);
  return shuffled.slice(0, count);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
async function getAllProducts() {
  try {
    const response = await axios.get(`${BASE_URL}?limit=0&depth=0`);
    return response.data.docs;
  } catch (error) {
    console.error('Error fetching products:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
async function updateProduct(id, updates) {
  try {
    await axios.patch(`${BASE_URL}/${id}`, updates, {
      headers: {
        'Content-Type': 'application/json',
      },
    });
    console.log(`‚úÖ Updated product ID ${id}`);
  } catch (error) {
    console.error(`‚ùå Error updating product ID ${id}:`, error.message);
    throw error;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function updateProductsFields() {
  try {
    const products = await getAllProducts();
    console.log(`üîç Found ${products.length} products`);

    const productIds = products.map(product => product.id);

    for (const product of products) {
      const updates = {};
      let needsUpdate = false;

      // description
      if (typeof product.description === 'undefined') {
        updates.description = lorem.generateSentences(2);
        needsUpdate = true;
      }

      // storageConditions
      if (typeof product.storageConditions === 'undefined') {
        updates.storageConditions = storageConditionsOptions[getRandomInt(0, storageConditionsOptions.length - 1)];
        needsUpdate = true;
      }

      // ingredients
      if (typeof product.ingredients === 'undefined') {
        updates.ingredients = ingredientsOptions[getRandomInt(0, ingredientsOptions.length - 1)];
        needsUpdate = true;
      }

      // recommendedProducts
      if (typeof product.recommendedProducts === 'undefined') {
        const availableIds = productIds.filter(id => id !== product.id);
        updates.recommendedProducts = getRandomItems(availableIds, 3);
        needsUpdate = true;
      }

      // nutritionalValue
      if (typeof product.nutritionalValue === 'undefined') {
        updates.nutritionalValue = {
          calories: getRandomInt(50, 500),
          proteins: getRandomInt(0, 50),
          carbohydrates: getRandomInt(0, 100),
          fats: getRandomInt(0, 50),
          fiber: getRandomInt(0, 20),
        };
        needsUpdate = true;
      }

      if (needsUpdate) {
        await updateProduct(product.id, updates);
      } else {
        console.log(`‚è≠Ô∏è Product ID ${product.id} already complete`);
      }
    }

    console.log('üéâ All products updated successfully!');
  } catch (error) {
    console.error('üí• Error updating products:', error.message);
  } finally {
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫
updateProductsFields();